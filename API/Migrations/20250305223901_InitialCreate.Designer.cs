// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(NotesContext))]
    [Migration("20250305223901_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("264b59f3-2346-4f72-b1fc-a6842bb45507"),
                            Description = "Descripcion",
                            Name = "Test"
                        },
                        new
                        {
                            Id = new Guid("264b59f3-2346-4f72-b1fc-a6842bb45508"),
                            Description = "Descripcion2",
                            Name = "Test2"
                        });
                });

            modelBuilder.Entity("API.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tasks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("264b59f3-2346-4f72-b1fc-a6842bb45509"),
                            CategoryId = new Guid("264b59f3-2346-4f72-b1fc-a6842bb45507"),
                            CreatedAt = new DateTime(2025, 2, 28, 19, 39, 21, 909, DateTimeKind.Utc).AddTicks(1710),
                            Description = "Descripcion1",
                            IsActive = true,
                            Priority = 1,
                            Title = "Tarea1"
                        },
                        new
                        {
                            Id = new Guid("264b59f3-2346-4f72-b1fc-a6842bb45510"),
                            CategoryId = new Guid("264b59f3-2346-4f72-b1fc-a6842bb45507"),
                            CreatedAt = new DateTime(2025, 2, 28, 19, 39, 21, 909, DateTimeKind.Utc).AddTicks(1717),
                            Description = "Descripcion2",
                            IsActive = true,
                            Priority = 2,
                            Title = "Tarea2"
                        },
                        new
                        {
                            Id = new Guid("8f31917c-5d9b-42d8-89a2-8d23d72c3088"),
                            CategoryId = new Guid("264b59f3-2346-4f72-b1fc-a6842bb45508"),
                            CreatedAt = new DateTime(2025, 2, 28, 19, 39, 21, 909, DateTimeKind.Utc).AddTicks(1720),
                            Description = "Descripcion3",
                            IsActive = false,
                            Priority = 3,
                            Title = "Tarea3"
                        });
                });

            modelBuilder.Entity("API.Models.Note", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("Notes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
